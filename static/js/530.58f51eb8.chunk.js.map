{"version":3,"file":"static/js/530.58f51eb8.chunk.js","mappings":"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","sources":["pages/Reviews/Reviews.styled.jsx","pages/Reviews/Reviews.jsx","hooks/UseFetchReviews.js","utils/formatReviewDate.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n    list-style: none;\n    margin: 0;\n    padding: ${props => props.theme.sizes(0)};\n`;\n\nexport const ReviewItem = styled.li`\n    &:not(:last-child) {\n        padding-bottom: ${props => props.theme.sizes(1)};\n        margin-bottom: ${props => props.theme.sizes(2)};\n        border-bottom: ${props => props.theme.borders.normal};\n        border-color: ${props => props.theme.colors.textColor};\n    }\n`;\n\nexport const ReviewAuthor = styled.h4`\n    margin-left: ${props => props.theme.sizes(3)};\n    margin-bottom: ${props => props.theme.sizes(1)};\n`;\n\nexport const ReviewData = styled.time`\n    display: inline-block;\n    margin-left: ${props => props.theme.sizes(3)};\n    margin-bottom: ${props => props.theme.sizes(2)};\n    font-weight: ${props => props.theme.fontWeights.bold};\n`;\n\nexport const ReviewText = styled.p`\n    text-indent: ${props => props.theme.sizes(6)};\n    margin-bottom: ${props => props.theme.sizes(1)};\n`;","import {\n    ReviewsList,\n    ReviewItem,\n    ReviewAuthor,\n    ReviewData,\n    ReviewText,\n} from './Reviews.styled';\nimport { useFetchReviews } from '../../hooks/UseFetchReviews';\nimport { formatReviewDate } from '../../utils/formatReviewDate';\n\nconst Reviews = () => {\n    const reviews = useFetchReviews();\n\n    return (\n        <>\n            {reviews?.length === 0 && <p>Sorry, there are not any reviews.</p>}\n            {reviews &&\n                <ReviewsList>\n                    {reviews.map(({ id, author, updated_at, content }) => (\n                        <ReviewItem key={id}>\n                            <ReviewAuthor>Author: {author}</ReviewAuthor>\n                            <ReviewData dateTime={updated_at}>{formatReviewDate(updated_at)}</ReviewData>\n                            <ReviewText>{content}</ReviewText>\n                        </ReviewItem>\n                    ))}\n                </ReviewsList>\n            }\n        </>\n    )\n}\n\nexport default Reviews;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../services/api';\n\nexport const useFetchReviews = () => {\n    const [cast, setCast] = useState(null);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        api.fetchMovieReviews(movieId).then(setCast).catch(console.error);\n    }, [movieId])\n    \n    return cast;\n}","import { format } from 'date-fns'\n\nexport const formatReviewDate = reviewDate => {\n    return format(Date.parse(reviewDate), 'dd.MM.yyyy')\n}","import axios from 'axios';\n\nconst moviesAPI = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\nconst API_KEY = 'b2ca45879b59d6f3a6890d4088317ef8';\n\n// get MoviesByTrend\nexport const fetchMoviesByTrend = async () => {\n    const response = await moviesAPI.get('/trending/movie/day?', {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\n// get MoviesBySearch\nexport const fetchMoviesBySearch = async (searchQuery) => {\n    const response = await moviesAPI.get('/search/movie?', {\n        params: {\n            api_key: API_KEY,\n            query: searchQuery,\n        },\n    });\n\n    return response.data.results;\n}\n\n// get MovieById\nexport const fetchMovieById = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data;\n}\n\n// get MovieCast\nexport const fetchMovieCast = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/credits?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.cast;\n}\n\n// get MovieReviews\nexport const fetchMovieReviews = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/reviews?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\nconst api = {\n    fetchMoviesByTrend,\n    fetchMoviesBySearch,\n    fetchMovieById,\n    fetchMovieCast,\n    fetchMovieReviews,\n}\n\nexport default api;"],"names":["ReviewsList","styled","props","theme","sizes","ReviewItem","borders","normal","colors","textColor","ReviewAuthor","ReviewData","fontWeights","bold","ReviewText","reviews","useState","cast","setCast","movieId","useParams","useEffect","api","then","catch","console","error","useFetchReviews","length","map","reviewDate","id","author","updated_at","content","dateTime","format","Date","parse","moviesAPI","axios","baseURL","API_KEY","fetchMoviesByTrend","get","params","api_key","response","data","results","fetchMoviesBySearch","searchQuery","query","fetchMovieById","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}
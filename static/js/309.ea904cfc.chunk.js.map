{"version":3,"file":"static/js/309.ea904cfc.chunk.js","mappings":"iNAEaA,EAAWC,EAAAA,GAAAA,GAAH,wKAURC,EAAWD,EAAAA,GAAAA,GAAH,oEAEA,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,MAAM,EAAtB,IAGbC,EAAgBL,EAAAA,GAAAA,EAAH,2C,2DCa1B,EAtBa,WACT,IAAMM,ECLkB,WACxB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOD,EAAP,KAAaE,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GAAAA,eAAmBH,GAASI,KAAKL,GAASM,MAAMC,QAAQC,MAC3D,GAAE,CAACP,IAEGH,CACV,CDJgBW,GAGb,OACI,gCACsB,KAAb,OAAJX,QAAI,IAAJA,OAAA,EAAAA,EAAMY,UAAgB,sFACtBZ,IACG,SAACP,EAAD,UACKO,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,aAA7B,OACN,0BACKA,GAAgB,gBAAKC,IATvB,kCAS6CD,EAAcE,IAAKH,EAAMI,MAAO,OAAW,gBAAKF,IAASG,EAAeF,IAAI,YAAYC,MAAO,IAAKE,OAAQ,OACxJ,SAAC3B,EAAD,UAAWqB,KACX,UAACjB,EAAD,yBAAyB,kBAAOgB,OAH3BD,EADH,QAW7B,C,wDE1BKS,E,QAAYC,EAAAA,OAAa,CAC3BC,QAAS,iCAEPC,EAAU,mCAGHC,EAAkB,mCAAG,oGACPJ,EAAUK,IAAI,uBAAwB,CACzDC,OAAQ,CACJC,QAASJ,KAHa,cACxBK,EADwB,yBAOvBA,EAASC,KAAKC,SAPS,2CAAH,qDAWlBC,EAAmB,mCAAG,WAAOC,GAAP,uFACRZ,EAAUK,IAAI,iBAAkB,CACnDC,OAAQ,CACJC,QAASJ,EACTU,MAAOD,KAJgB,cACzBJ,EADyB,yBAQxBA,EAASC,KAAKC,SARU,2CAAH,sDAYnBI,EAAc,mCAAG,WAAOC,GAAP,uFACHf,EAAUK,IAAV,iBAAwBU,EAAxB,KAA+B,CAClDT,OAAQ,CACJC,QAASJ,KAHS,cACpBK,EADoB,yBAOnBA,EAASC,MAPU,2CAAH,sDAWdO,EAAc,mCAAG,WAAOD,GAAP,uFACHf,EAAUK,IAAV,iBAAwBU,EAAxB,aAAuC,CAC1DT,OAAQ,CACJC,QAASJ,KAHS,cACpBK,EADoB,yBAOnBA,EAASC,KAAKhC,MAPK,2CAAH,sDAWdwC,EAAiB,mCAAG,WAAOF,GAAP,uFACNf,EAAUK,IAAV,iBAAwBU,EAAxB,aAAuC,CAC1DT,OAAQ,CACJC,QAASJ,KAHY,cACvBK,EADuB,yBAOtBA,EAASC,KAAKC,SAPQ,2CAAH,sDAUxB3B,EAAM,CACRqB,mBAAAA,EACAO,oBAAAA,EACAG,eAAAA,EACAE,eAAAA,EACAC,kBAAAA,GAGJ,M","sources":["pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx","hooks/UseFetchCast.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 16px;\n    justify-content: center;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport const CastName = styled.h4`\n    width: 150px;\n    margin-bottom: ${props => props.theme.sizes(1)};\n`;\n\nexport const CastCharacter = styled.p`\n    width: 150px;\n`;","import {\n    CastList,\n    CastName,\n    CastCharacter,\n} from './Cast.styled';\nimport imageNotFound from './image-not-found.jpeg';\nimport { useFetchCast } from '../../hooks/UseFetchCast';\n\nconst Cast = () => {\n    const cast = useFetchCast();\n    const posterPathBase = 'https://image.tmdb.org/t/p/w500';\n\n    return (\n        <>\n            {cast?.length === 0 && <p>Sorry, there are not information about actors and actress.</p>}\n            {cast &&\n                <CastList>\n                    {cast.map(({ cast_id, character, name, profile_path }) => (\n                        <li key={cast_id}>\n                            {profile_path ? (<img src={posterPathBase + profile_path} alt={name} width={150}/>) : (<img src=    {imageNotFound} alt='Not found' width={150} height={225}/>)}\n                            <CastName>{name}</CastName>\n                            <CastCharacter>Character:<br />{character}</CastCharacter>\n                        </li>\n                    ))}\n                </CastList>\n            }\n        </>\n    )\n}\n\nexport default Cast;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../services/api';\n\nexport const useFetchCast = () => {\n    const [cast, setCast] = useState(null);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        api.fetchMovieCast(movieId).then(setCast).catch(console.error);\n    }, [movieId])\n    \n    return cast;\n}","import axios from 'axios';\n\nconst moviesAPI = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\nconst API_KEY = 'b2ca45879b59d6f3a6890d4088317ef8';\n\n// get MoviesByTrend\nexport const fetchMoviesByTrend = async () => {\n    const response = await moviesAPI.get('/trending/movie/day?', {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\n// get MoviesBySearch\nexport const fetchMoviesBySearch = async (searchQuery) => {\n    const response = await moviesAPI.get('/search/movie?', {\n        params: {\n            api_key: API_KEY,\n            query: searchQuery,\n        },\n    });\n\n    return response.data.results;\n}\n\n// get MovieById\nexport const fetchMovieById = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data;\n}\n\n// get MovieCast\nexport const fetchMovieCast = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/credits?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.cast;\n}\n\n// get MovieReviews\nexport const fetchMovieReviews = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/reviews?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\nconst api = {\n    fetchMoviesByTrend,\n    fetchMoviesBySearch,\n    fetchMovieById,\n    fetchMovieCast,\n    fetchMovieReviews,\n}\n\nexport default api;"],"names":["CastList","styled","CastName","props","theme","sizes","CastCharacter","cast","useState","setCast","movieId","useParams","useEffect","api","then","catch","console","error","useFetchCast","length","map","cast_id","character","name","profile_path","src","alt","width","imageNotFound","height","moviesAPI","axios","baseURL","API_KEY","fetchMoviesByTrend","get","params","api_key","response","data","results","fetchMoviesBySearch","searchQuery","query","fetchMovieById","id","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}